<?php namespace ProcessWire;

/**
* Feedback
*
* See README.md for usage instructions.
*
* @author Tabea David <info@justonestep.de>
* @version 0.1.1
* @copyright Copyright (c) 2017
* @see https://github.com/justonestep/processwire-feedback
* @see http://www.processwire.com
*/

/**
* Class Feedback
*/
class ProcessFeedback extends Process implements Module {

  /**
   * Get module information
   *
   * @return array
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'ProcessFeedback',
      'summary' => 'Displays saved feedback (backend).',
      'version' => 011,
      'href' => 'https://github.com/justonestep/processwire-feedback',
      'singular' => true,
      'autoload' => true,
      'icon' => 'share',
      'permission' => 'page-edit',
      'requires' => 'Feedback'
    );
  }

  /**
   * admin page name
   */
  const ADMIN_PAGE_NAME = 'feedback';

  /**
   * Initialize the module
   */
  public function init() {
    $this->configData = (object)$this->modules->getModuleConfigData('Feedback');
  }

  /**
   * Execute the process
   *
   * @return string
   */
  public function ___execute() {
    if ($this->input->get->entry) return $this->getDetailView();

    return $this->getListView();
  }

  /**
   * Get detail view
   *
   * @return string
   */
  private function getDetailView() {
    $entry = $this->pages->get($this->input->get->entry);
    $created = date("d.m.Y, g:i a", $entry->created);

    // CHANGE READ STATE
    if ($entry->{Feedback::FIELD_VIEWED} === 0) {
      $entry->setAndSave(Feedback::FIELD_VIEWED, 1);
    }

    // definitionlist
    $out = '<dl>';
    $out .= "<dt>{$this->_('Date')}</dt><dd>$created</dd>";

    foreach ($this->configData->allFields as $f) {
      $field = $this->fields->get($f);
      $label = $field->label;
      $body = $field->type instanceof FieldtypeOptions ? $entry->$f->title : nl2br($entry->$f);

      $out .= "<dt>$label</dt><dd>$body</dd>";
    }

    $out .= '</dl>';

    // backlink
    $overview = $this->page->url;
    $icon = '<i class="fa fa-fw fa-angle-double-left"></i>';
    $out .= "<a href='$overview'>{$icon} {$this->_('back to overview')}</a>";

    return $out;
  }

  /**
   * Get list view
   *
   * @return string
   */
  private function getListView() {
    $table = $this->wire('modules')->get('MarkupAdminDataTable');
    $table->setSortable(true);
    $table->setEncodeEntities(false);

    // table header
    $headerRow = array('view', $this->_('Date'));
    foreach ($this->configData->allFields as $f) {
      $field = $this->fields->get($f);
      if ($field->type instanceof FieldtypeTextarea) continue;
      $headerRow[] = $field->label;
    }
    $table->headerRow($headerRow);

    // table content
    $entries = $this->pages->find('template=' . Feedback::TEMPLATE_NAME . ',sort=-created,limit=' . $this->limit);
    if ($entries->count === 0) return $this->_('There are no entries available yet.');
    foreach ($entries as $entry) {
      $iconMarkup = '<i class="fa fa-fw fa-%s"></i>';
      $icon = sprintf($iconMarkup, $entry->{Feedback::FIELD_VIEWED} ? 'eye' : 'eye-slash');
      $url = $this->page->url . '?entry=' . $entry->id;
      $link = "<a href='$url' title='{$this->_('Details')}'>$icon</a>";
      $tableRow = array($link, date("d.m.Y, g:i a", $entry->created));
      foreach ($this->configData->allFields as $f) {
        $field = $this->fields->get($f);
        if ($field->type instanceof FieldtypeTextarea) continue;
        $tableRow[] = $field->type instanceof FieldtypeOptions ? $entry->$f->title : $entry->$f;
      }

      $table->row($tableRow);
    }

    return $table->render() . $entries->renderPager();
  }

  /**
   * Return the pages that this Processes are installed on
   */
  public function getInstalledPage() {
    $admin = $this->pages->get($this->config->adminRootPageID);
    $parent = $admin->child('name=setup,include=all');
    if (!$parent->id) $parent = $admin;

    $pageAdmin = $parent->child('name=' . self::ADMIN_PAGE_NAME . ',include=all');
    if (!$pageAdmin->id) {
      $pageAdmin = new Page();
      $pageAdmin->parent = $parent;
      $pageAdmin->template = $this->templates->get('admin');
      $pageAdmin->name = self::ADMIN_PAGE_NAME;
      $pageAdmin->title = $this->_('Feedback');
      $pageAdmin->process = $this;
      $pageAdmin->sort = $parent->numChildren;
      $pageAdmin->save();
    }

    return $pageAdmin;
  }

  /**
   * Install routine
   * A new page with this Process module assigned is created.
   */
  public function ___install() {
    // create Admin page
    $p = $this->getInstalledPage();
    $this->message("Installed to {$p->path}");
  }

  /**
   * Uninstall routine
   *
   * This should return the site to the same state
   * it was in before the module was installed.
   */
  public function ___uninstall() {
    // delete the admin page
    $p = $this->getInstalledPage();
    if ($p->id) {
      $p->delete();
      $this->message("Deleted Page: {$p->path}");
    }
  }

}
