<?php namespace ProcessWire;

use PhilipBrown\Signature\Auth;
use PhilipBrown\Signature\Token;
use PhilipBrown\Signature\Request;
use PhilipBrown\Signature\Guards\CheckKey;
use PhilipBrown\Signature\Guards\CheckVersion;
use PhilipBrown\Signature\Guards\CheckTimestamp;
use PhilipBrown\Signature\Guards\CheckSignature;
use PhilipBrown\Signature\Exceptions\SignatureException;

/**
* Feedback
*
* See README.md for usage instructions.
*
* @author Tabea David <info@justonestep.de>
* @version 0.1.1
* @copyright Copyright (c) 2017
* @see https://github.com/justonestep/processwire-feedback
* @see http://www.processwire.com
*/

/**
* Class Feedback
*/
class Feedback extends WireData implements Module {

  /**
   * Get module information
   *
   * @return array
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Feedback',
      'summary' => 'Send and save feedack via json and display it (backend).',
      'version' => 011,
      'href' => 'https://github.com/justonestep/processwire-feedback',
      'singular' => true,
      'autoload' => true,
      'icon' => 'share',
      'installs' => 'ProcessFeedback'
    );
  }

  /**
   * string template name
   */
  const TEMPLATE_NAME = 'feedback';

  /**
   * string tag name
   */
  const TAG_NAME = 'feedback';

  /**
   * field name whether the entry has been viewed
   */
  const FIELD_VIEWED = 'feedback_viewed';

  /**
   * submit field name for form
   */
  const SUBMIT = 'submit-feedback';

  /**
   * contains used api data
   */
  private static $apiDataDefaults = array('name' => '', 'key' => '', 'secret' => '', 'email' => '');

  /**
   * contains used api data
   */
  private $apiData;

  /**
   * Markup used during the render() method
   */
  static protected $markup = array(
    'list' => "{out}\n",
    'item' => "\n\t<div {attrs}>\n{out}\n\t</div>",
    'item_label' => "\n\t\t<label class='form__item--label' for='{for}'>{out}</label>",
    'item_label_hidden' => "\n\t\t<label class='field__header field__header--hidden {class}'>{out}</label>",
    'item_content' => "{out}",
    'item_error' => "\n<p class='field--error--message'>{out}</p>",
    'item_description' => "\n<p class='field__description'>{out}</p>",
    'item_head' => "\n<h2>{out}</h2>",
    'item_notes' => "\n<p class='field__notes'>{out}</p>",
    'item_icon' => "",
    'item_toggle' => "",
    // ALSO:
    // InputfieldAnything => array( any of the properties above to override on a per-Inputifeld basis)
  );

   /**
   * Classes used during the render() method
   */
  static protected $classes = array(
    'form' => 'form  js-simplecontactform', // additional clases for inputfieldform (optional)
    'list' => 'fields',
    'list_clearfix' => 'clearfix',
    'item' => 'form__item form__item--{name}',
    'item_label' => '', // additional classes for inputfieldheader (optional)
    'item_content' => '',  // additional classes for inputfieldcontent (optional)
    'item_required' => 'field--required', // class is for inputfield
    'item_error' => 'field--error', // note: not the same as markup[item_error], class is for inputfield
    'item_collapsed' => 'field--collapsed',
    'item_column_width' => 'field__column',
    'item_column_width_first' => 'field__column--first',
    'item_show_if' => 'field--show-if',
    'item_required_if' => 'field--required-if'
    // ALSO:
    // InputfieldAnything => array( any of the properties above to override on a per-Inputifeld basis)
  );

  /**
   * Initialize the module - ready
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   */
  public function ready() {
    $this->addHookBefore('Modules::saveModuleConfigData', $this, 'addFields');
    $this->apiData = (object) self::$apiDataDefaults;

    // only include script on module edit page
    if ($this->page->path === '/delta/module/' && $this->input->name === $this->className) {
      $this->config->scripts->add($this->config->urls->siteModules . $this->className . '/Feedback.js');
    }

    require_once($this->config->paths->{$this->className} . 'vendor/autoload.php');
  }

  /**
   * Render Form
   *
   * @param array $options
   * @param string $apiKey
   * @return string
   */
  public function render($options = array(), $apiKey = null) {
    $form = $this->buildAndProcessForm(null, $options);

    if (!$form->getErrors() && $this->input->post->{self::SUBMIT}) {
      $params = array();

      foreach ($this->allFields as $af) {
        $field = $this->fields->get($af);
        $key = str_replace(self::TAG_NAME . '_', '', $af);
        if ($this->input->post[$af]) $params[$key] = $this->input->post[$af];
      }

      if ($apiKeyOverride = $this->determineApiKey($params)) $apiKey = $apiKeyOverride;

      if ($result = $this->sendFeedback($params, $apiKey)) {
        $response = json_decode($result);
        if ($response->success) return $this->_('We\'ll answer you soon!');
      }

      return $this->_('Something went wrong.');
    } else {
      return $form->render();
    }
  }

  /**
   * Send Feedback
   *
   * @param array $params
   * @param string $apiKey
   * @return json
   */
  public function sendFeedback($params, $apiKey = null) {
    $this->getApiData($apiKey);
    $path = $this->pages->get($this->saveMessagesParent)->httpUrl;

    if (!$this->apiData->key || !$this->apiData->secret) return $this->setErrorResponse(4);

    // correct path, fix for multisite testing
    // if path is something like `http://main.sitehttp://current.site/endpoint/`
    if (strrpos($path, 'http') !== 0) $path = substr($path, strrpos($path, 'http'));

    $http = new WireHttp;
    $http->setHeader('content-type', 'application/json; charset=utf-8');

    if ($this->authentication === 'sha') {
      $token = new Token($this->apiData->key, $this->apiData->secret);
      $request = new Request('POST', $path, $params);
      $authParams = $request->sign($token);
      $queryParams = array_merge($authParams, $params);
    } else {
      $http->setHeader('Authorization: Basic', base64_encode("{$this->apiData->key}:{$this->apiData->secret}"));
      $queryParams = $params;
    }

    return $http->post($path, json_encode($queryParams));
  }

  /**
   * Save Feedback
   */
  public function saveFeedback() {
    // only accept post requests
    if (strtolower($_SERVER['REQUEST_METHOD']) !== 'post') return $this->setErrorResponse(1);

    // only accept content type "application/json"
    $contentType = strtolower($_SERVER['CONTENT_TYPE']);
    if (strpos($contentType, 'application/json') === false) return $this->setErrorResponse(2);

    // handle empty response
    $params = $this->getPassedParams();
    if (!$params) return $this->setErrorResponse(3);

    // validate authentication
    if (!$this->apiData->key || !$this->apiData->secret) return $this->setErrorResponse(4);

    if ($this->authentication === 'sha') {
      if (!$this->isValidHashedAuthentication($params)) return $this->setErrorResponse(4);
    } else {
      if (!$this->isValidHttpBasicAuthentication($params)) return $this->setErrorResponse(4);
    }

    // build form
    $form = $this->buildAndProcessForm($params);

    // evaluate form
    if ($form->getErrors()) return $this->getErrorsAndSetResponse($form);

    // save feedback
    $pageId = $this->createFeedback($params);
    if (!$pageId) return $this->setErrorResponse(5);

    // send notification
    if ($this->apiData->email) $this->sendMail($pageId);

    return $this->setSuccessResponse();
  }

  /**
   * Hookable method called before the form is processed
   * Allows custom setting of apiKey
   * For example depending on OptionField
   */
  protected function ___determineApiKey($params) {
    return null;
  }

  /**
   * Get Api Data
   *
   * @param string $apiKey
   * @param boolean $strict
   */
  private function getApiData($apiKey = null, $strict = false) {
    $keySecretData = json_decode($this->api, true);
    $index = 0;
    $validApiKey = $strict ? false : true; // if false, use first entry

    // get first key
    if ($apiKey) {
      $validApiKey = false; // if an apiKey is passed, it must match

      // find entry matching key=$key
      foreach ($keySecretData as $superiorKey => $entryArray) {
        $key = array_search($apiKey, $entryArray);
        if ($key && $key === 'key') {
          $index = $superiorKey;
          $validApiKey = true;
          break;
        }
      }
    }

    $this->apiData = $validApiKey ? (object) $keySecretData[$index] : (object) self::$apiDataDefaults;
  }

  /**
   * Send Mail
   *
   * @param integer $pageId
   */
  private function sendMail($pageId) {
    $p = $this->pages->get($pageId);

    $options = array(
      'noPermissionCheck' => true,
      'noInit' => true,
      'noInstall' => true
    );

    $link = $this->modules->getModule('ProcessFeedback', $options)->getInstalledPage();
    $msg = array(
      $this->_('Hei!'),
      '',
      $this->sanitizer->unentities($this->_('You\'ve received a new message:')) . ' ' . $link->httpUrl . '?entry=' . $pageId,
      ''
    );

    foreach ($this->allFields as $af) {
      $field = $this->fields->get($af);
      $value = $field->type instanceof FieldtypeOptions ? $p->$af->title : $p->$af;
      $msg[] = $field->label . ': ' . $value;
    }

    $msg[] = '';
    $msg[] = '--';
    $msg[] = $this->_('Sent via ProcessWire');

    try {
      $wireMail = \ProcessWire\wireMail();
      $wireMail->to($this->apiData->email);
      $wireMail->from($this->emailfrom);
      $wireMail->subject($this->_('Recent Feedback') . " - {$this->apiData->name}");
      $wireMail->body(implode(PHP_EOL, $msg));
      $send = $wireMail->send();
    } catch (\Exception $e) {
      $this->log->save('errors', $this->className . ': ' . $e->getMessage());
    }
  }

  /**
   * Get passed parameters
   */
  private function getPassedParams() {
    $params = null;

    if ($json = json_decode(@file_get_contents('php://input'), true)) {
      $params = array_merge($_REQUEST, $json);

      if (isset($_SERVER['HTTP_AUTHORIZATION'])) {
        $ha = base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6) );
        list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) = explode(':', $ha);
      }

      // basic HTTP authetication
      if (isset($_SERVER['PHP_AUTH_USER'])) {
        $credentials = array(
          'auth_key' => $_SERVER['PHP_AUTH_USER'],
          'auth_secret' => $_SERVER['PHP_AUTH_PW']
        );

        $params = array_merge($params, $credentials);
      }

      // remove path
      if (isset($params['it'])) unset($params['it']);
    }

    if (isset($params['auth_key'])) $this->getApiData($params['auth_key'], true);

    return $params;
  }

  /**
   * Is valid HTTP Basic Authentication
   *
   * @param array $params
   * @return boolean
   */
  private function isValidHttpBasicAuthentication($params) {
    $isCorrectUser = isset($params['auth_key']) && $params['auth_key'] === $this->apiData->key;
    $isCorrectPass = isset($params['auth_secret']) && $params['auth_secret'] === $this->apiData->secret;

    return $isCorrectUser && $isCorrectPass;
  }

  /**
   * Is valid Hashed Authentication
   *
   * @param array $params
   * @return boolean
   */
  private function isValidHashedAuthentication($params) {
    $path = $this->pages->get($this->saveMessagesParent)->httpUrl;
    $isValid = true;
    $auth  = new Auth('POST', $path, $params, array(
      new CheckKey,
      new CheckVersion,
      new CheckTimestamp,
      new CheckSignature
    ));

    $token = new Token($this->apiData->key, $this->apiData->secret);

    try {
      $auth->attempt($token);
    } catch (SignatureException $e) {
      $isValid = false;
    }

    return $isValid;
  }

  private function setFormPresets(&$form, $options) {
    $btnClass = isset($options['btnClass']) ? $options['btnClass'] : 'button';
    $btnText = isset($options['btnText']) ? $options['btnText'] : 'Send';
    $markup = isset($options['markup']) ? array_merge(self::$markup, $options['markup']) : self::$markup;
    $classes = isset($options['classes']) ? array_merge(self::$classes, $options['classes']) : self::$classes;

    // Form Rendering
    $form->setMarkup($markup);
    $form->setClasses($classes);

    // add honeypot (spam protection)
    $honeyField = $this->modules->get('InputfieldText');
    $honeyField->name = 'feedback_website';
    $honeyField->initValue = '';
    $form->append($honeyField);

    // add a submit button to the form
    $submit = $this->modules->get('InputfieldSubmit');
    $submit->name = self::SUBMIT;
    $submit->attr('value', $btnText);
    $submit->attr('class', $btnClass);
    $form->append($submit);
  }

  /**
   * Build and Process Form
   *
   * @param array $params
   * @return InputfieldForm
   */
  private function buildAndProcessForm($params = array(), $options = array()) {
    $processForm = false;
    $form = $this->modules->get('InputfieldForm');
    $form->method = 'post';

    // add fields, set field values
    foreach ($this->allFields as $in) {
      $key = str_replace(self::TAG_NAME . '_', '', $in);
      $field = $this->fields->get($in);
      $inputfield = $field->getInputfield($this->page);
      $form->append($inputfield);
      if ($params && isset($params[$key])) $this->input->post[$in] = $params[$key];
    }

    // PROCESS Form via API
    if ($params) {
      // add CSRF token
      $this->input->post[$this->session->CSRF->getTokenName()] = $this->session->CSRF->getTokenValue();
      $processForm = true;
    } else {
      // Form Rendering
      $this->setFormPresets($form, $options);
    }

    // on form submit
    if ($this->input->post->{self::SUBMIT}) $processForm = true;

    // process input, send and validate form
    if ($processForm) $form->processInput($this->input->post);

    // test whether honeypot field has been filled
    if ($processForm && $this->input->post->feedback_website) {
      $honeypot = $form->get('feedback_website');
      $honeypot->error($this->_('Sorry, but your message didn\'t pass our spam test. Please try another time.'));
    }

    return $form;
  }

  /**
   * Create Feedback, save as page
   *
   * @param array $params
   * @return mixed
   */
  private function createFeedback($params) {
    $date = new \DateTime();
    $name = array($date->getTimestamp());

    if ($parts = $this->saveMessagesScheme) {
      foreach ($parts as $part) {
        $key = str_replace(self::TAG_NAME . '_', '', $part);
        if (isset($params[$key])) $name[] = $params[$key];
      }
    }

    if (count($name) > 1) unset($name[0]);
    $pageName = implode(' ', $name);

    $p = new Page();
    $p->template = $this->sanitizer->text(self::TEMPLATE_NAME);
    $p->parent = $this->pages->get($this->saveMessagesParent);
    $p->title = $this->sanitizer->text($pageName);

    foreach ($this->allFields as $in) {
      $key = str_replace(self::TAG_NAME . '_', '', $in);
      if (isset($params[$key])) {
        $p->$in = $this->sanitizer->textarea($params[$key], array('stripTags' => false));
      }
    }

    $p->save();

    return $p->id ? $p->id : null;
  }

  /**
   * Set success reponse
   *
   * @return json
   */
  private function setSuccessResponse() {
    http_response_code(201);
    return json_encode(array('success' => true));
  }

  /**
   * Get errors and return error response
   *
   * @param InputfieldForm $form
   * @return json
   */
  private function getErrorsAndSetResponse($form) {
    $errors = array();
    foreach ($form->children as $in) {
      if ($err = $in->getErrors()) {
        $key = str_replace(self::TAG_NAME . '_', '', $in->name);
        $errors[$key] = $err[0];
      }
    }

    return $this->setErrorResponse(999, $errors);
  }

  /**
   * Set error response
   *
   * @param integer $reason
   * @param array $errors
   * @return json
   */
  private function setErrorResponse($reason, $errors = array()) {
    switch ($reason) {
      case 1:
        $code = 400;
        $error = 'incorrect_request_method';
        $msg = $this->_('Incorrect request method.');
        break;
      case 2:
        $code = 400;
        $error = 'incorrect_content_type';
        $msg = $this->_('Incorrect content type.');
        break;
      case 3:
        $code = 400;
        $error = 'missing_parameters';
        $msg = $this->_('Parameters are missing.');
        break;
      case 4:
        $code = 401;
        $error = 'incorrect_client_credentials';
        $msg = $this->_('Authorization failed.');
        break;
      case 5:
        $code = 503;
        $error = 'error_saving_request';
        $msg = $this->_('Page could not be successfully created.');
        break;
      case 999:
        $code = 400;
        $error = 'validation_error';
        $msg = $this->_('Validation error.');
        break;
      default:
        $code = 400;
        $error = 'general_error';
        $msg = $this->_('Something went wrong.');
        break;
    }

    $data = array(
      'success' => false,
      'error' => $error,
      'error_description' => $msg
    );

    if ($errors) $data['errors'] = $errors;
    http_response_code($code);

    return json_encode($data);
  }

  /**
   * Hook create and add template fields
   *
   * @param HookEvent $event
   */
  public function addFields(HookEvent $event) {
    if ($event->arguments[0] !== $this->className) return;

    $configData = $event->arguments[1];
    $configDataOld = $this->modules->getModuleConfigData($this->className);

    if (isset($_POST['apidata'])) {
      $apiData = array_values($_POST['apidata']);
      $configData['api'] = json_encode($apiData);
      $event->arguments(1, $configData);
    }

    // create template if it doesn't exist
    $fg = $this->createTemplate($configData);

    // auto template add / remove fields
    // compare transferred data with currently saved data
    $fieldsAdded = array_diff($configData['allFields'], $configDataOld['allFields']);
    $fieldsDeleted = array_diff($configDataOld['allFields'], $configData['allFields']);

    if ($fieldsAdded) $this->assignNewFields($fieldsAdded, $fg);
    if ($fieldsDeleted) $this->deleteFields($fieldsDeleted, $fg);

    // create and add fields
    if ($configData['addFields']) { // OR! a new field is added using ASM select
      $this->addNewFields($configData, $fg);
      $event->setArgument(1, $configData);
    }
  }

  /**
   * Create template
   *
   * @param array $configData
   * @return Fieldgroup
   */
  private function createTemplate($configData) {
    if ($template = $this->templates->get(self::TEMPLATE_NAME)) {
      $fg = $template->fieldgroup; // get existing fieldgroup
    } else {
      // new fieldgroup
      $fg = new Fieldgroup();
      $fg->name = self::TEMPLATE_NAME;
      $fg->add($this->fields->get('title')); // needed title field
      $fg->save();

      // new template
      $template = new Template();
      $template->name = self::TEMPLATE_NAME;
      $template->fieldgroup = $fg; // add the fieldgroup
      $template->slashUrls = 1;
      $template->noPrependTemplateFile = 1;
      $template->noAppendTemplateFile = 1;
      $template->tags = self::TAG_NAME;
      $template->save();

      // add field whether the entry has been viewed
      $f = new Field();
      $f->type = $this->modules->get('FieldtypeCheckbox');
      $f->name = self::FIELD_VIEWED;
      $f->label = $this->_('Viewed');
      $f->tags = self::TAG_NAME;
      $f->columnWidth = '25';
      $f->save();

      $fg->add($f); // add field to fieldgroup
      $fg->save(); // save fieldgroup
    }

    $this->validateParent($configData);

    return $fg;
  }

  /**
   * Validate parent page
   *
   * @param array $configData
   */
  private function validateParent($configData) {
    // add default for save messages parent
    if (!$configData['saveMessagesParent']) $configData['saveMessagesParent'] = $this->config->rootPageID;
    // check if selected parent allows children
    $pTemplate = $this->pages->get($configData['saveMessagesParent'])->template;
    // noChildren must be 0
    if ($pTemplate->noChildren > 0) {
      $this->log->error($this->_('Please choose another parent or change the belonging template. It must allow children.'));
    } elseif (count($pTemplate->childTemplates) > 0 && !in_array($configData['saveMessagesParent'], $pTemplate->childTemplates)) {
      // if childTemplates is set, it must contain parent->template->id
      $this->log->error(sprintf(
        $this->_("Please choose another parent or change the belonging template. AllowedTemplates must include `%s` template."),
        self::TEMPLATE_NAME
      ));
    }
  }

  /**
   * Add new fields
   *
   * @param array $configData
   * @param Fieldgroup $fg
   */
  private function addNewFields(&$configData, $fg) {
    $newFields = $configData['addFields'];
    $allFields = $configData['allFields'];

    foreach (explode(',', $newFields) as $name) {
      $taggedName = self::TAG_NAME . '_' . $name;
      if (!in_array($taggedName, $allFields)) $allFields[] = $taggedName;
      if (!is_null($this->fields->get($taggedName))) continue;

      $f = new Field();
      $f->type = $this->modules->get('FieldtypeText');
      $f->name = $taggedName;
      $f->label = ucfirst($name);
      $f->tags = self::TAG_NAME;
      $f->columnWidth = '25';
      $f->save();

      if ($fg) {
        $fg->add($f); // add field to fieldgroup
        $fg->save(); // save fieldgroup
      }
    }

    $configData['allFields'] = $allFields;
    $configData['addFields'] = '';
  }

  /**
   * Add new fields
   *
   * @param array $newFields
   * @param Fieldgroup $fg
   */
  private function assignNewFields($newFields, $fg) {
    foreach ($newFields as $name) {
      $f = $this->fields->get($name);

      if ($f && $fg) {
        $fg->add($f); // add field to fieldgroup
        $fg->save(); // save fieldgroup
      }
    }
  }

  /**
   * Delete fields
   *
   * @param array $newFields
   * @param Fieldgroup $fg
   */
  private function deleteFields($deleteFields, $fg) {
    foreach ($deleteFields as $name) {
      $f = $this->fields->get($name);

      if ($f && $fg) {
        $fg->remove($f); // remove field from fieldgroup
        $fg->save(); // save fieldgroup
      }
    }
  }

}
